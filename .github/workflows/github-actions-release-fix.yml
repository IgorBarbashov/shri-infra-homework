name: Fix Release
run-name: Release ${{ github.run_number }} fix was triggered by ${{ github.actor }} on ${{ github.event_name }} event

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (number)'
        required: true

env:
  RELEASE_VERSION: ${{ github.event.inputs.release_version }}
  FIX_VERSION: ${{ github.run_number }}
  BRANCH_NAME: "releases/${{ github.event.inputs.release_version }}"

jobs:
  linter-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

  tests-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs:
      - linter-checks
      - tests-checks

    env:
      PORT: ${{ vars.PORT }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      NODE_VERSION: ${{ vars.NODE_VERSION }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build Docker image
        run: npm run build:docker

      - name: Authorize Yandex Cloud Container Registry
        run: echo "${{ secrets.OAUTH_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Tag and push Docker images
        run: |
          docker tag ${{ env.IMAGE_NAME }} "cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}"
          docker push "cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}"
          docker tag ${{ env.IMAGE_NAME }} "cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_latest"
          docker push "cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_latest"

  create-tag-and-update-reestrs:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          ref: ${{ env.BRANCH_NAME }}

      - name: Configure Git
        run: |
          git config --global user.name "Shri-Deploy-Bot"
          git config --global user.email "igorbarbashov@yandex.ru"

      - name: Create Tag
        run: |
          git fetch --tags
          git tag -a "v${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}" -m "Fix ${{ env.FIX_VERSION }} for Release version ${{ env.RELEASE_VERSION }}"
          git push origin --tags

      - name: Update CHANGELOG.md
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          latest_tag=$(git tag --sort=-creatordate | sed -n '1p')
          previous_tag=$(git tag --sort=-creatordate | sed -n '2p')

          if [ ! -z "$latest_tag" ]; then
            if [ -z "$previous_tag" ]; then
              commit_list=$(git log --all --oneline --pretty=format:"* %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $latest_tag)
              commit_message="Update CHANGELOG.md with commit list from repository start to $latest_tag"
            else
              commit_list=$(git log --all --oneline --pretty=format:"* %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $previous_tag..$latest_tag)
              commit_message="Update CHANGELOG.md with commit list between $previous_tag and $latest_tag"
            fi

            echo "$commit_list" > commit_list.txt
            echo "COMMIT_LIST_FILE=commit_list.txt" >> $GITHUB_ENV

            { printf "### Release %s\n\n%s\n\n%s\n" "$RELEASE_VERSION" "$commit_list" "$(cat CHANGELOG.md)" ; } > CHANGELOG.new && mv CHANGELOG.new CHANGELOG.md
            git add CHANGELOG.md
            git commit -m "$commit_message"
            git push origin main
          else
            echo "There are no tags"
            exit 1
          fi

      - name: Create Label for Release Issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh label create "v${{ env.RELEASE_VERSION }}" --color "f29513" --description "Label for Release v${{ env.RELEASE_VERSION }}"

      - name: Add comment to Release Issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          issue_id=$(gh issue list --label "v${{ env.RELEASE_VERSION }}" --json number --jq '.[0].number')
          if [ -n "$issue_id" ]; then
            commit_list=$(cat ${{ env.COMMIT_LIST_FILE }})
            gh issue comment $issue_id --body "$(echo -e "**Date:** $(date -u +"%Y-%m-%d")<br> \
              **Author:** ${{ github.actor }}<br> \
              **Version:** ${{ env.RELEASE_VERSION }}<br> \
              **Commits:**<br><br>${commit_list}<br> \
              **Docker Image:** cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}<br> \
              **Docker Image Latest:** cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}_latest")"
          else
            echo "Issue with label v${{ env.RELEASE_VERSION }} not found."
            exit 1
          fi
